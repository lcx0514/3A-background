<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       	http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">


    <context:component-scan base-package="com.unitrust.timestamp3A.controller.*"/>
    <context:component-scan base-package="com.unitrust.timestamp3A.dao.*"/>
    <context:component-scan base-package="com.unitrust.timestamp3A.service.*"/>
    <!-- 我配置的扫描位置是 -->
    <context:component-scan base-package="com.unitrust.timestamp3A.task"/>

    <aop:aspectj-autoproxy proxy-target-class="true">
        <aop:include name="logAspect"/>
    </aop:aspectj-autoproxy>
    <bean id="logAspect" class="com.unitrust.timestamp3A.logs.LogAspectAction"/>
    <mvc:annotation-driven/>

    <!--
    <bean id="configProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:system.properties</value>
                <value>classpath*:jdbc.properties</value>
                <value>classpath*:redis.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
-->
    <!---->
    <bean id="configProperties" class="unitrust.sso.config.ConfigProperties"/>

    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>


    <bean id="stringConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <bean id="jsonConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringConverter"/>
                <ref bean="jsonConverter"/>
            </list>
        </property>
    </bean>

    <bean id="internalResourceViewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>5120000000</value>
        </property>
        <property name="maxInMemorySize">
            <value>1024</value>
        </property>
    </bean>
    <mvc:default-servlet-handler/>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${3A.url}"/>
        <property name="username" value="${3A.username}"/>
        <property name="password" value="${3A.password}"/>
        <property name="driverClassName" value="${3A.driverClassName}"/>
        <property name="filters" value="${3A.filters}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${3A.maxActive}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${3A.initialSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${3A.maxWait}"/>
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${3A.minIdle}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${3A.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${3A.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${3A.validationQuery}"/>
        <property name="testWhileIdle" value="${3A.testWhileIdle}"/>
        <property name="testOnBorrow" value="${3A.testOnBorrow}"/>
        <property name="testOnReturn" value="${3A.testOnReturn}"/>
        <property name="maxOpenPreparedStatements" value="${3A.maxOpenPreparedStatements}"/>
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned" value="${3A.removeAbandoned}"/>
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout" value="${3A.removeAbandonedTimeout}"/>
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value="${3A.logAbandoned}"/>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
        <property name="plugins">
            <list>
                <ref bean="pageInterceptor"/>
            </list>
        </property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.unitrust.timestamp3A.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <bean id="pageInterceptor" class="com.unitrust.timestamp3A.common.interceptor.page.PageInterceptor"/>

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-setting.xml" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.unitrust.timestamp3A.authorization.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager" />
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="0" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>


    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
    <!--<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"/>-->

    <!--自定义认证 -->
    <bean id="myRealm" class="com.unitrust.timestamp3A.authorization.realm.MyRealm">
        <property name="sessionTime" value="900000"/><!-- 15分钟 -->
        <property name="credentialsMatcher" ref="credentialsMatcher" />
    </bean>

    <!-- Shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--多realms配置 -->
        <property name="realms">
            <list>
                <ref bean="myRealm"/>

            </list>
        </property>
    </bean>

    <!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 Web应用中，Shiro可控制的Web请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/login.do"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
        <!-- <property name="successUrl" value="/" ></property> -->
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->
        <property name="unauthorizedUrl" value="/noAuthorization.jsp"/>
        <property name="filterChainDefinitions">
            <value>
                /logout.do = anon
                /login.do = anon
                /check.do = anon
                /comboFixSyns = anon
                /js/* = anon
                /css/** = anon
                /img/** = anon
                /fonts/** = anon
                /main/* = authc
                /user/* =roles[/user/]
                /roles/* = roles[/roles/]
                /custom/* = roles[/custom/]
                /order/* = roles[/order/]
                /consume/* = roles[/consume/]
                /consume/cci/* = roles[/consume/cci/]
                /consume/log/person/* =roles[/consume/log/person/]
                /consume/log/enterprise/* =roles[/consume/log/enterprise/]
                /logs/* = roles[/logs/]
                /combo/* = roles[/combo/]
                /business/* = roles[/business/]
                /personal/* = roles[/personal/]
                /task/* = roles[/task/]
                /apilogs/* = roles[/apilogs/]
                /** = authc
            </value>
        </property>
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- <property name="maxActive" value="200" /> version 2.1.0 -->
        <property name="maxTotal" value="${3A.redis.timestamp3A.maxTotal}"/>
        <property name="maxIdle" value="${3A.redis.timestamp3A.maxIdle}"/>
        <!-- <property name="maxWait" value="3000" /> version 2.1.0 -->
        <property name="maxWaitMillis" value="${3A.redis.timestamp3A.maxWaitMillis}"/>
    </bean>


    <!-- 程序中要使用的操作redis集群的对象 -->
    <bean id="jedisClusterClient" class="redis.clients.jedis.JedisCluster">
        <!-- 构造方法注入 节点集合（只写一个就可以，集群中其余的节点会自动加载进来） , 超时时间，最大重连次数，数据池配置对象 public
            JedisCluster(Set<HostAndPort> jedisClusterNode, int timeout, int maxRedirections,final
            GenericObjectPoolConfig poolConfig) -->
        <constructor-arg name="jedisClusterNode">
            <set>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="${3A.redis.host.1}"/>
                    <constructor-arg name="port" value="${3A.redis.port.1}"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="${3A.redis.host.2}"/>
                    <constructor-arg name="port" value="${3A.redis.port.1}"/>
                </bean>
                <bean class="redis.clients.jedis.HostAndPort">
                    <constructor-arg name="host" value="${3A.redis.host.3}"/>
                    <constructor-arg name="port" value="${3A.redis.port.3}"/>
                </bean>
            </set>
        </constructor-arg>
        <constructor-arg name="timeout" value="${3A.redis.timeout}"/>
        <constructor-arg name="maxAttempts" value="${3A.redis.maxAttempts}"/>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <bean id="cusConsumeInventoryJeditsSpringDao"
          class="com.unitrust.timestamp3A.redis.dao.impl.CusConsumeInventoryJeditsSpringDaoImpl">
        <property name="redisClientTemplate" ref="jedisTemplateAPI"/>
    </bean>

    <bean id="jeditsClusterUtil" class="com.unitrust.timestamp3A.redis.util.JeditsClusterUtil">
        <property name="jedisClusterClient" ref="jedisClusterClient"/>
    </bean>
    <bean id="jedisTemplateAPI"
          class="com.unitrust.timestamp3A.redis.template.RedisClientClusterTemplate">
        <property name="jeditsClusterUtil" ref="jeditsClusterUtil"/>
    </bean>


    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <aop:config>
        <aop:pointcut
                expression="execution(public * com.unitrust.timestamp3A.service.*.impl.*Impl.*(..))"
                id="pointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <context:annotation-config/>
    <tx:annotation-driven transaction-manager="txManager"/>
    <!-- S 配置定时任务-->
    <task:executor id="executor" pool-size="5"/>
    <!--配置线程池-->
    <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven executor="executor" scheduler="scheduler"/>
    <!--E 配置定时任务-->
    <!-- task任务扫描注解
    <task:annotation-driven/>
    -->

    <bean id="mailSender" class="com.unitrust.timestamp3A.mail.MailSender"/>

    <bean id="common" class="com.unitrust.timestamp3A.common.util.Common"/>

    <bean id="createOrderNumber" class="com.unitrust.timestamp3A.common.CreateOrderNumber"/>

</beans>